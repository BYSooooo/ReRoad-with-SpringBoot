<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Member">

    <!-- Security 로그인 ResultMap -->
    <resultMap id="loginMap" type="UserVo">
        <id property="userId" javaType="string" jdbcType="VARCHAR" column="userId" />
        <id property="userPwd" javaType="string" jdbcType="VARCHAR"  column="userPwd" />
        <id property="role" javaType="string" jdbcType="VARCHAR" column="role" />
    </resultMap>

    <!-- Security 로그인 -->
    <select id="getUserById" parameterType="string" resultType="UserVo" resultMap="loginMap">
        SELECT userId, userPwd, userNick, role
        FROM user_info
        WHERE userId = #{userId}

    </select>
    <!-- 회원 정보의 ResultMap -->
    <resultMap id="infoMap" type="UserVo">
        <id property="userId" javaType="string" jdbcType="VARCHAR" column="userId" />
        <id property="userNick" javaType="string" jdbcType="VARCHAR"  column="userNick" />
        <id property="role" javaType="string" jdbcType="VARCHAR" column="role" />
    </resultMap>

    <!-- 아이디를 통해 회원 정보 반환, 필요한 회원 정보가 있다면 추가할 것. -->
    <select id="getInfoFromDB" parameterType="string" resultType="UserVo" resultMap="infoMap">
        SELECT userId, userNick, role
        FROM user_info
        WHERE userId = #{userId}
    </select>

    <!--회원가입 -->
    <insert id="inputUser" parameterType="hashMap">
        INSERT INTO user_info(userId, userPwd, userNick, role, joinDate )
        VALUES (#{userId}, #{userPwd}, #{userNick}, #{role}, NOW() )

    </insert>

    <!-- 회원 가입 과정에서 아이디 중복 체크 -->
    <select id="checkId" parameterType="string" resultType="int">
        SELECT COUNT(*) + (
            SELECT COUNT(*)
            FROM exit_user
            WHERE userId=#{userId}
        )
        FROM user_info
        WHERE userId = #{userId}
    </select>

    <!-- 회원 가입 과정에서 닉네임 중복 체크 -->
    <select id="checkNick" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM user_info
        WHERE userNick = #{userNick}
    </select>


    <!-- 관리자가 회원의 상세정보를 조회한다 -->
    <resultMap type="UserVo" id="userResultMap">
        <id column="userId" jdbcType="VARCHAR" javaType="string" property="userId"/>
        <result column="userNick" jdbcType="VARCHAR" javaType="string" property="userNick"/>
    </resultMap>
    <select id="selectAll" resultMap="userResultMap" statementType="CALLABLE">
        SELECT u.userId, u.userNick,(SELECT COUNT(*) FROM report re WHERE re.userId = u.userId )
            as reportCount FROM user_info u WHERE role = 'ROLE_MEMBER';
    </select>

    <!-- 회원 강제탈퇴-->
    <delete id="deleteUserForce" statementType="CALLABLE" parameterType="string">
        { call sp_user_deleteForce(#{userid}) }
    </delete>

    <!-- 회원 자진탈퇴-->
    <delete id="deleteUser" statementType="CALLABLE" parameterType="string">
        { call sp_user_delete(#{userid}) }
    </delete>

    <!-- 비밀번호일치 확인 -->
    <select id="selectPwd" parameterType="string" resultType="string">
        SELECT userPwd
        FROM user_info
        WHERE userId = #{userId}
    </select>

    <!-- 회원정보를 상세조회한다 -->
    <resultMap type="UserVo" id="userOneResultMap">
        <id property="userId" javaType="string" column="userId"
            jdbcType="VARCHAR" />
        <result property="userNick" javaType="string" column="userNick"
                jdbcType="VARCHAR" />
        <result property="photoOrigin" javaType="string"
                column="photoOrigin" jdbcType="VARCHAR" />
        <result property="photoSys" javaType="string" column="photoSys"
                jdbcType="VARCHAR" />
        <result property="joinDate" javaType="string" column="joinDate" jdbcType="VARCHAR" />
        <result property="boardCount" javaType="int" column="boardCount" jdbcType="INTEGER" />
        <result property="comCount" javaType="int" column="comCount" jdbcType="INTEGER" />
    </resultMap>
    <select id="selectOne" statementType="CALLABLE"
            resultMap="userOneResultMap" parameterType="string">
        SELECT u.userId, u.userNick, u.photoOrigin, u.photoSys, u.joinDate,(SELECT COUNT(*) FROM board b WHERE b.userId = u.userId )
            as boardCount, (SELECT COUNT(*) FROM comment c WHERE c.userId = u.userId )
            as comCount
        FROM user_info u
        WHERE u.userId = #{userId};
    </select>

    <!-- 회원정보를 변경한다 -->
    <update id="update" parameterType="UserVo" >
        UPDATE user_info
        SET
            userPwd = #{userPwd}, userNick = #{userNick},
            photoOrigin = #{photoOrigin}, photoSys = #{photoSys}
        WHERE userId = #{userId}
    </update>

</mapper>

